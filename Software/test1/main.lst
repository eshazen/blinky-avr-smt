
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000150  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000150  000001c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000075c  00000000  00000000  000001c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000ea2  00000000  00000000  00000920  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  000017c2  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000017d4  2**2
                  CONTENTS, READONLY
  6 .debug_info   00000420  00000000  00000000  00001810  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003e8  00000000  00000000  00001c30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  00002018  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000173  00000000  00000000  00002032  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	18 c0       	rjmp	.+48     	; 0x32 <__ctors_end>
   2:	1f c0       	rjmp	.+62     	; 0x42 <__bad_interrupt>
   4:	1e c0       	rjmp	.+60     	; 0x42 <__bad_interrupt>
   6:	1d c0       	rjmp	.+58     	; 0x42 <__bad_interrupt>
   8:	1c c0       	rjmp	.+56     	; 0x42 <__bad_interrupt>
   a:	1b c0       	rjmp	.+54     	; 0x42 <__bad_interrupt>
   c:	1a c0       	rjmp	.+52     	; 0x42 <__bad_interrupt>
   e:	19 c0       	rjmp	.+50     	; 0x42 <__bad_interrupt>
  10:	18 c0       	rjmp	.+48     	; 0x42 <__bad_interrupt>
  12:	17 c0       	rjmp	.+46     	; 0x42 <__bad_interrupt>
  14:	16 c0       	rjmp	.+44     	; 0x42 <__bad_interrupt>
  16:	15 c0       	rjmp	.+42     	; 0x42 <__bad_interrupt>
  18:	14 c0       	rjmp	.+40     	; 0x42 <__bad_interrupt>
  1a:	13 c0       	rjmp	.+38     	; 0x42 <__bad_interrupt>
  1c:	12 c0       	rjmp	.+36     	; 0x42 <__bad_interrupt>
  1e:	11 c0       	rjmp	.+34     	; 0x42 <__bad_interrupt>
  20:	10 c0       	rjmp	.+32     	; 0x42 <__bad_interrupt>

00000022 <__trampolines_end>:
  22:	00 00       	nop
  24:	00 01       	movw	r0, r0
  26:	00 02       	muls	r16, r16
  28:	00 03       	mulsu	r16, r16
  2a:	00 07       	cpc	r16, r16
  2c:	01 00       	.word	0x0001	; ????
  2e:	01 01       	movw	r0, r2
  30:	01 02       	muls	r16, r17

00000032 <__ctors_end>:
  32:	11 24       	eor	r1, r1
  34:	1f be       	out	0x3f, r1	; 63
  36:	cf e5       	ldi	r28, 0x5F	; 95
  38:	d2 e0       	ldi	r29, 0x02	; 2
  3a:	de bf       	out	0x3e, r29	; 62
  3c:	cd bf       	out	0x3d, r28	; 61
  3e:	36 d0       	rcall	.+108    	; 0xac <main>
  40:	85 c0       	rjmp	.+266    	; 0x14c <_exit>

00000042 <__bad_interrupt>:
  42:	de cf       	rjmp	.-68     	; 0x0 <__vectors>

00000044 <led_mask>:

// create masks for ports A/B for LEDs specified
// PORT A = low byte
// PORT B = high byte
static uint16_t led_mask( uint8_t leds)
{
  44:	cf 93       	push	r28
  46:	c8 2f       	mov	r28, r24
  48:	40 e0       	ldi	r20, 0x00	; 0
  4a:	50 e0       	ldi	r21, 0x00	; 0
  uint16_t v = 0;
  uint8_t i;
  uint8_t b = 1;
  4c:	61 e0       	ldi	r22, 0x01	; 1
// create masks for ports A/B for LEDs specified
// PORT A = low byte
// PORT B = high byte
static uint16_t led_mask( uint8_t leds)
{
  uint16_t v = 0;
  4e:	80 e0       	ldi	r24, 0x00	; 0
  50:	90 e0       	ldi	r25, 0x00	; 0
  for( i=0; i<8; i++) {
    if( leds & b) {
      if( led_port(i) == LED_PORTA)
	v |= _BV(led_bit(i));
      else
	v |= (_BV(led_bit(i)) << 8);
  52:	a1 e0       	ldi	r26, 0x01	; 1
  54:	b0 e0       	ldi	r27, 0x00	; 0
  uint16_t v = 0;
  uint8_t i;
  uint8_t b = 1;

  for( i=0; i<8; i++) {
    if( leds & b) {
  56:	2c 2f       	mov	r18, r28
  58:	26 23       	and	r18, r22
  5a:	01 f1       	breq	.+64     	; 0x9c <led_mask+0x58>
      if( led_port(i) == LED_PORTA)
  5c:	9a 01       	movw	r18, r20
  5e:	22 0f       	add	r18, r18
  60:	33 1f       	adc	r19, r19
  62:	f9 01       	movw	r30, r18
  64:	ee 5d       	subi	r30, 0xDE	; 222
  66:	ff 4f       	sbci	r31, 0xFF	; 255
  68:	74 91       	lpm	r23, Z
  6a:	f9 01       	movw	r30, r18
  6c:	31 96       	adiw	r30, 0x01	; 1
	v |= _BV(led_bit(i));
  6e:	ee 5d       	subi	r30, 0xDE	; 222
  70:	ff 4f       	sbci	r31, 0xFF	; 255
  uint8_t i;
  uint8_t b = 1;

  for( i=0; i<8; i++) {
    if( leds & b) {
      if( led_port(i) == LED_PORTA)
  72:	71 11       	cpse	r23, r1
  74:	08 c0       	rjmp	.+16     	; 0x86 <led_mask+0x42>
	v |= _BV(led_bit(i));
  76:	e4 91       	lpm	r30, Z
  78:	9d 01       	movw	r18, r26
  7a:	02 c0       	rjmp	.+4      	; 0x80 <led_mask+0x3c>
  7c:	22 0f       	add	r18, r18
  7e:	33 1f       	adc	r19, r19
  80:	ea 95       	dec	r30
  82:	e2 f7       	brpl	.-8      	; 0x7c <led_mask+0x38>
  84:	09 c0       	rjmp	.+18     	; 0x98 <led_mask+0x54>
      else
	v |= (_BV(led_bit(i)) << 8);
  86:	e4 91       	lpm	r30, Z
  88:	9d 01       	movw	r18, r26
  8a:	02 c0       	rjmp	.+4      	; 0x90 <led_mask+0x4c>
  8c:	22 0f       	add	r18, r18
  8e:	33 1f       	adc	r19, r19
  90:	ea 95       	dec	r30
  92:	e2 f7       	brpl	.-8      	; 0x8c <led_mask+0x48>
  94:	32 2f       	mov	r19, r18
  96:	22 27       	eor	r18, r18
  98:	82 2b       	or	r24, r18
  9a:	93 2b       	or	r25, r19
    }
    b <<= 1;
  9c:	66 0f       	add	r22, r22
  9e:	4f 5f       	subi	r20, 0xFF	; 255
  a0:	5f 4f       	sbci	r21, 0xFF	; 255
{
  uint16_t v = 0;
  uint8_t i;
  uint8_t b = 1;

  for( i=0; i<8; i++) {
  a2:	48 30       	cpi	r20, 0x08	; 8
  a4:	51 05       	cpc	r21, r1
  a6:	b9 f6       	brne	.-82     	; 0x56 <led_mask+0x12>
	v |= (_BV(led_bit(i)) << 8);
    }
    b <<= 1;
  }
  return v;
}
  a8:	cf 91       	pop	r28
  aa:	08 95       	ret

000000ac <main>:
  led_on( set_mask);
}


int main (void)
{
  ac:	20 e0       	ldi	r18, 0x00	; 0
  ae:	30 e0       	ldi	r19, 0x00	; 0
  uint8_t i;
  for( i=0; i<8; i++) {
    if( led_port(i) == LED_PORTA)
      DDRA |= _BV(led_bit(i));
    else
      DDRB |= _BV(led_bit(i));
  b0:	41 e0       	ldi	r20, 0x01	; 1
  b2:	50 e0       	ldi	r21, 0x00	; 0

static void inline setup_led_ports()
{
  uint8_t i;
  for( i=0; i<8; i++) {
    if( led_port(i) == LED_PORTA)
  b4:	c9 01       	movw	r24, r18
  b6:	88 0f       	add	r24, r24
  b8:	99 1f       	adc	r25, r25
  ba:	fc 01       	movw	r30, r24
  bc:	ee 5d       	subi	r30, 0xDE	; 222
  be:	ff 4f       	sbci	r31, 0xFF	; 255
  c0:	64 91       	lpm	r22, Z
  c2:	fc 01       	movw	r30, r24
  c4:	31 96       	adiw	r30, 0x01	; 1
      DDRA |= _BV(led_bit(i));
  c6:	ee 5d       	subi	r30, 0xDE	; 222
  c8:	ff 4f       	sbci	r31, 0xFF	; 255

static void inline setup_led_ports()
{
  uint8_t i;
  for( i=0; i<8; i++) {
    if( led_port(i) == LED_PORTA)
  ca:	61 11       	cpse	r22, r1
  cc:	0a c0       	rjmp	.+20     	; 0xe2 <main+0x36>
      DDRA |= _BV(led_bit(i));
  ce:	e4 91       	lpm	r30, Z
  d0:	6a b3       	in	r22, 0x1a	; 26
  d2:	ca 01       	movw	r24, r20
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <main+0x2c>
  d6:	88 0f       	add	r24, r24
  d8:	ea 95       	dec	r30
  da:	ea f7       	brpl	.-6      	; 0xd6 <main+0x2a>
  dc:	86 2b       	or	r24, r22
  de:	8a bb       	out	0x1a, r24	; 26
  e0:	09 c0       	rjmp	.+18     	; 0xf4 <main+0x48>
    else
      DDRB |= _BV(led_bit(i));
  e2:	e4 91       	lpm	r30, Z
  e4:	67 b3       	in	r22, 0x17	; 23
  e6:	ca 01       	movw	r24, r20
  e8:	01 c0       	rjmp	.+2      	; 0xec <main+0x40>
  ea:	88 0f       	add	r24, r24
  ec:	ea 95       	dec	r30
  ee:	ea f7       	brpl	.-6      	; 0xea <main+0x3e>
  f0:	86 2b       	or	r24, r22
  f2:	87 bb       	out	0x17, r24	; 23
  f4:	2f 5f       	subi	r18, 0xFF	; 255
  f6:	3f 4f       	sbci	r19, 0xFF	; 255
#define led_port(n) (pgm_read_byte(&(led_port_code[((n)<<1)])))

static void inline setup_led_ports()
{
  uint8_t i;
  for( i=0; i<8; i++) {
  f8:	28 30       	cpi	r18, 0x08	; 8
  fa:	31 05       	cpc	r19, r1
  fc:	d9 f6       	brne	.-74     	; 0xb4 <main+0x8>

  setup_led_ports();

  while( 1) {
    for( i=0; i<8; i++) {
      uint8_t m = (1<<i);
  fe:	01 e0       	ldi	r16, 0x01	; 1
 100:	10 e0       	ldi	r17, 0x00	; 0
  led_on( set_mask);
}


int main (void)
{
 102:	c0 e0       	ldi	r28, 0x00	; 0
 104:	d0 e0       	ldi	r29, 0x00	; 0

  setup_led_ports();

  while( 1) {
    for( i=0; i<8; i++) {
      uint8_t m = (1<<i);
 106:	78 01       	movw	r14, r16
 108:	0c 2e       	mov	r0, r28
 10a:	01 c0       	rjmp	.+2      	; 0x10e <main+0x62>
 10c:	ee 0c       	add	r14, r14
 10e:	0a 94       	dec	r0
 110:	ea f7       	brpl	.-6      	; 0x10c <main+0x60>
}

// turn on LEDs per mask
static void led_on( uint8_t on_mask)
{
  uint16_t v = led_mask( on_mask);
 112:	8e 2d       	mov	r24, r14
 114:	97 df       	rcall	.-210    	; 0x44 <led_mask>
  PORTA |= (v & 0xff);
 116:	2b b3       	in	r18, 0x1b	; 27
 118:	82 2b       	or	r24, r18
 11a:	8b bb       	out	0x1b, r24	; 27
  PORTB |= ((v>>8) & 0xff);
 11c:	88 b3       	in	r24, 0x18	; 24
 11e:	98 2b       	or	r25, r24
 120:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 122:	83 e2       	ldi	r24, 0x23	; 35
 124:	94 ef       	ldi	r25, 0xF4	; 244
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <main+0x7a>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <main+0x80>
 12c:	00 00       	nop
}

// turn off LEDs per mask
static void led_off( uint8_t off_mask)
{
  uint16_t v = led_mask( off_mask);
 12e:	8e 2d       	mov	r24, r14
 130:	89 df       	rcall	.-238    	; 0x44 <led_mask>
  PORTA &= ~(v & 0xff);
 132:	2b b3       	in	r18, 0x1b	; 27
 134:	80 95       	com	r24
 136:	28 23       	and	r18, r24
 138:	2b bb       	out	0x1b, r18	; 27
  PORTB &= ~((v>>8) & 0xff);
 13a:	88 b3       	in	r24, 0x18	; 24
 13c:	90 95       	com	r25
 13e:	89 23       	and	r24, r25
 140:	88 bb       	out	0x18, r24	; 24
 142:	21 96       	adiw	r28, 0x01	; 1
  uint8_t i;

  setup_led_ports();

  while( 1) {
    for( i=0; i<8; i++) {
 144:	c8 30       	cpi	r28, 0x08	; 8
 146:	d1 05       	cpc	r29, r1
 148:	f1 f6       	brne	.-68     	; 0x106 <main+0x5a>
 14a:	db cf       	rjmp	.-74     	; 0x102 <main+0x56>

0000014c <_exit>:
 14c:	f8 94       	cli

0000014e <__stop_program>:
 14e:	ff cf       	rjmp	.-2      	; 0x14e <__stop_program>
