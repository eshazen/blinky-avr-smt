
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000008f6  0000098a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000ab  00800060  00800060  0000098a  2**0
                  ALLOC
  3 .stab         00001404  00000000  00000000  0000098c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001009  00000000  00000000  00001d90  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00002d99  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002dac  2**2
                  CONTENTS, READONLY
  7 .debug_info   00000420  00000000  00000000  00002de8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000003e8  00000000  00000000  00003208  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  000035f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000173  00000000  00000000  0000360a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	7f c0       	rjmp	.+254    	; 0x100 <__ctors_end>
   2:	8e c0       	rjmp	.+284    	; 0x120 <__bad_interrupt>
   4:	8d c0       	rjmp	.+282    	; 0x120 <__bad_interrupt>
   6:	8c c0       	rjmp	.+280    	; 0x120 <__bad_interrupt>
   8:	8b c0       	rjmp	.+278    	; 0x120 <__bad_interrupt>
   a:	8a c0       	rjmp	.+276    	; 0x120 <__bad_interrupt>
   c:	89 c0       	rjmp	.+274    	; 0x120 <__bad_interrupt>
   e:	88 c0       	rjmp	.+272    	; 0x120 <__bad_interrupt>
  10:	87 c0       	rjmp	.+270    	; 0x120 <__bad_interrupt>
  12:	86 c0       	rjmp	.+268    	; 0x120 <__bad_interrupt>
  14:	85 c0       	rjmp	.+266    	; 0x120 <__bad_interrupt>
  16:	84 c0       	rjmp	.+264    	; 0x120 <__bad_interrupt>
  18:	83 c0       	rjmp	.+262    	; 0x120 <__bad_interrupt>
  1a:	82 c0       	rjmp	.+260    	; 0x120 <__bad_interrupt>
  1c:	81 c0       	rjmp	.+258    	; 0x120 <__bad_interrupt>
  1e:	80 c0       	rjmp	.+256    	; 0x120 <__bad_interrupt>
  20:	7f c0       	rjmp	.+254    	; 0x120 <__bad_interrupt>

00000022 <__trampolines_end>:
  22:	00 00       	nop
  24:	00 01       	movw	r0, r0
  26:	00 02       	muls	r16, r16
  28:	00 03       	mulsu	r16, r16
  2a:	00 07       	cpc	r16, r16
  2c:	01 00       	.word	0x0001	; ????
  2e:	01 01       	movw	r0, r2
  30:	01 02       	muls	r16, r17

00000032 <font_table>:
  32:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 22     >QIE>.B.@.BaQIF"
  42:	41 49 49 36 0c 0a 49 7f 48 2f 49 49 49 31 3e 49     AII6..I.H/III1>I
  52:	49 49 32 01 71 09 05 03 36 49 49 49 36 26 49 49     II2.q...6III6&II
  62:	49 3e 7e 09 09 09 7e 7f 49 49 49 36 3e 41 41 41     I>~...~.III6>AAA
  72:	22 7f 41 41 41 3e 7f 49 49 49 41 7f 09 09 09 09     ".AAA>.IIIA.....
  82:	3e 41 49 49 3a 7f 08 08 08 7f 00 41 7f 41 00 30     >AII:......A.A.0
  92:	40 41 3f 01 7f 08 08 14 63 00 7f 40 40 40 7f 02     @A?.....c..@@@..
  a2:	0c 02 7f 7f 02 0c 10 7f 3e 41 41 41 3e 7f 09 09     ........>AAA>...
  b2:	09 06 3e 41 51 21 5e 7f 09 19 29 46 46 49 49 49     ..>AQ!^...)FFIII
  c2:	31 01 01 7f 01 01 3f 40 40 40 3f 1f 20 40 20 1f     1.....?@@@?. @ .
  d2:	3f 40 38 40 3f 63 14 08 14 63 07 08 70 08 07 61     ?@8@?c...c..p..a
  e2:	51 49 45 43 00 00 60 60 00 00 00 5f 00 00 36 49     QIEC..``..._..6I
  f2:	55 22 50 02 01 51 09 06 00 00 50 30 00 00           U"P..Q....P0..

00000100 <__ctors_end>:
 100:	11 24       	eor	r1, r1
 102:	1f be       	out	0x3f, r1	; 63
 104:	cf e5       	ldi	r28, 0x5F	; 95
 106:	d2 e0       	ldi	r29, 0x02	; 2
 108:	de bf       	out	0x3e, r29	; 62
 10a:	cd bf       	out	0x3d, r28	; 61

0000010c <__do_clear_bss>:
 10c:	21 e0       	ldi	r18, 0x01	; 1
 10e:	a0 e6       	ldi	r26, 0x60	; 96
 110:	b0 e0       	ldi	r27, 0x00	; 0
 112:	01 c0       	rjmp	.+2      	; 0x116 <.do_clear_bss_start>

00000114 <.do_clear_bss_loop>:
 114:	1d 92       	st	X+, r1

00000116 <.do_clear_bss_start>:
 116:	ab 30       	cpi	r26, 0x0B	; 11
 118:	b2 07       	cpc	r27, r18
 11a:	e1 f7       	brne	.-8      	; 0x114 <.do_clear_bss_loop>
 11c:	28 d2       	rcall	.+1104   	; 0x56e <main>
 11e:	e9 c3       	rjmp	.+2002   	; 0x8f2 <_exit>

00000120 <__bad_interrupt>:
 120:	6f cf       	rjmp	.-290    	; 0x0 <__vectors>

00000122 <led_mask>:

// create masks for ports A/B for LEDs specified
// PORT A = low byte
// PORT B = high byte
static uint16_t led_mask( uint8_t leds)
{
 122:	cf 93       	push	r28
 124:	c8 2f       	mov	r28, r24
 126:	40 e0       	ldi	r20, 0x00	; 0
 128:	50 e0       	ldi	r21, 0x00	; 0
  uint16_t v = 0;
  uint8_t i;
  uint8_t b = 1;
 12a:	61 e0       	ldi	r22, 0x01	; 1
// create masks for ports A/B for LEDs specified
// PORT A = low byte
// PORT B = high byte
static uint16_t led_mask( uint8_t leds)
{
  uint16_t v = 0;
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	90 e0       	ldi	r25, 0x00	; 0
  for( i=0; i<8; i++) {
    if( leds & b) {
      if( led_port(i) == LED_PORTA)
	v |= _BV(led_bit(i));
      else
	v |= (_BV(led_bit(i)) << 8);
 130:	a1 e0       	ldi	r26, 0x01	; 1
 132:	b0 e0       	ldi	r27, 0x00	; 0
  uint16_t v = 0;
  uint8_t i;
  uint8_t b = 1;

  for( i=0; i<8; i++) {
    if( leds & b) {
 134:	2c 2f       	mov	r18, r28
 136:	26 23       	and	r18, r22
 138:	01 f1       	breq	.+64     	; 0x17a <led_mask+0x58>
      if( led_port(i) == LED_PORTA)
 13a:	9a 01       	movw	r18, r20
 13c:	22 0f       	add	r18, r18
 13e:	33 1f       	adc	r19, r19
 140:	f9 01       	movw	r30, r18
 142:	ee 5d       	subi	r30, 0xDE	; 222
 144:	ff 4f       	sbci	r31, 0xFF	; 255
 146:	74 91       	lpm	r23, Z
 148:	f9 01       	movw	r30, r18
 14a:	31 96       	adiw	r30, 0x01	; 1
	v |= _BV(led_bit(i));
 14c:	ee 5d       	subi	r30, 0xDE	; 222
 14e:	ff 4f       	sbci	r31, 0xFF	; 255
  uint8_t i;
  uint8_t b = 1;

  for( i=0; i<8; i++) {
    if( leds & b) {
      if( led_port(i) == LED_PORTA)
 150:	71 11       	cpse	r23, r1
 152:	08 c0       	rjmp	.+16     	; 0x164 <led_mask+0x42>
	v |= _BV(led_bit(i));
 154:	e4 91       	lpm	r30, Z
 156:	9d 01       	movw	r18, r26
 158:	02 c0       	rjmp	.+4      	; 0x15e <led_mask+0x3c>
 15a:	22 0f       	add	r18, r18
 15c:	33 1f       	adc	r19, r19
 15e:	ea 95       	dec	r30
 160:	e2 f7       	brpl	.-8      	; 0x15a <led_mask+0x38>
 162:	09 c0       	rjmp	.+18     	; 0x176 <led_mask+0x54>
      else
	v |= (_BV(led_bit(i)) << 8);
 164:	e4 91       	lpm	r30, Z
 166:	9d 01       	movw	r18, r26
 168:	02 c0       	rjmp	.+4      	; 0x16e <led_mask+0x4c>
 16a:	22 0f       	add	r18, r18
 16c:	33 1f       	adc	r19, r19
 16e:	ea 95       	dec	r30
 170:	e2 f7       	brpl	.-8      	; 0x16a <led_mask+0x48>
 172:	32 2f       	mov	r19, r18
 174:	22 27       	eor	r18, r18
 176:	82 2b       	or	r24, r18
 178:	93 2b       	or	r25, r19
    }
    b <<= 1;
 17a:	66 0f       	add	r22, r22
 17c:	4f 5f       	subi	r20, 0xFF	; 255
 17e:	5f 4f       	sbci	r21, 0xFF	; 255
{
  uint16_t v = 0;
  uint8_t i;
  uint8_t b = 1;

  for( i=0; i<8; i++) {
 180:	48 30       	cpi	r20, 0x08	; 8
 182:	51 05       	cpc	r21, r1
 184:	b9 f6       	brne	.-82     	; 0x134 <led_mask+0x12>
	v |= (_BV(led_bit(i)) << 8);
    }
    b <<= 1;
  }
  return v;
}
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <led_on>:
}

// turn on LEDs per mask
static void led_on( uint8_t on_mask)
{
  uint16_t v = led_mask( on_mask);
 18a:	cb df       	rcall	.-106    	; 0x122 <led_mask>
  PORTA |= (v & 0xff);
 18c:	2b b3       	in	r18, 0x1b	; 27
 18e:	82 2b       	or	r24, r18
 190:	8b bb       	out	0x1b, r24	; 27
  PORTB |= ((v>>8) & 0xff);
 192:	88 b3       	in	r24, 0x18	; 24
 194:	98 2b       	or	r25, r24
 196:	98 bb       	out	0x18, r25	; 24
 198:	08 95       	ret

0000019a <led_off.constprop.1>:
}

// turn off LEDs per mask
static void led_off( uint8_t off_mask)
{
  uint16_t v = led_mask( off_mask);
 19a:	8f ef       	ldi	r24, 0xFF	; 255
 19c:	c2 df       	rcall	.-124    	; 0x122 <led_mask>
  PORTA &= ~(v & 0xff);
 19e:	2b b3       	in	r18, 0x1b	; 27
 1a0:	80 95       	com	r24
 1a2:	28 23       	and	r18, r24
 1a4:	2b bb       	out	0x1b, r18	; 27
  PORTB &= ~((v>>8) & 0xff);
 1a6:	88 b3       	in	r24, 0x18	; 24
 1a8:	90 95       	com	r25
 1aa:	89 23       	and	r24, r25
 1ac:	88 bb       	out	0x18, r24	; 24
 1ae:	08 95       	ret

000001b0 <led_set>:
}

// set LEDs per mask
static void led_set( uint8_t set_mask)
{
 1b0:	cf 93       	push	r28
 1b2:	c8 2f       	mov	r28, r24
  led_off( 0xff);
 1b4:	f2 df       	rcall	.-28     	; 0x19a <led_off.constprop.1>
  led_on( set_mask);
 1b6:	8c 2f       	mov	r24, r28
}
 1b8:	cf 91       	pop	r28

// set LEDs per mask
static void led_set( uint8_t set_mask)
{
  led_off( 0xff);
  led_on( set_mask);
 1ba:	e7 cf       	rjmp	.-50     	; 0x18a <led_on>

000001bc <read_adc>:

uint16_t read_adc( uint8_t ch)
{
  uint8_t lo, hi;

  ADMUX = ch;
 1bc:	87 b9       	out	0x07, r24	; 7
  ADCSRA |= _BV(ADSC);
 1be:	36 9a       	sbi	0x06, 6	; 6
  loop_until_bit_is_clear( ADCSRA, ADSC);
 1c0:	36 99       	sbic	0x06, 6	; 6
 1c2:	fe cf       	rjmp	.-4      	; 0x1c0 <read_adc+0x4>
  lo = ADCL;
 1c4:	84 b1       	in	r24, 0x04	; 4
  hi = ADCH;
 1c6:	25 b1       	in	r18, 0x05	; 5
  
  return( (hi<<8) | lo);
 1c8:	90 e0       	ldi	r25, 0x00	; 0
}
 1ca:	92 2b       	or	r25, r18
 1cc:	08 95       	ret

000001ce <sample_clk_data>:


// sample the light sensor once (with averaging)
// return bit 0 = clk state  bit 1 = data state
uint8_t sample_clk_data() {
 1ce:	cf 93       	push	r28
 1d0:	df 93       	push	r29
  uint8_t rv;

  sum_d = sum_c = 0;
 1d2:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <sum_c>
 1d6:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <sum_c+0x1>
 1da:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <sum_c+0x2>
 1de:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <sum_c+0x3>
 1e2:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <sum_d>
 1e6:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <sum_d+0x1>
 1ea:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <sum_d+0x2>
 1ee:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <sum_d+0x3>
  for( k=0; k<NAV; k++) {
 1f2:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <k+0x1>
 1f6:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <k>
 1fa:	c0 91 61 00 	lds	r28, 0x0061	; 0x800061 <k>
 1fe:	d0 91 62 00 	lds	r29, 0x0062	; 0x800062 <k+0x1>
 202:	ce 31       	cpi	r28, 0x1E	; 30
 204:	d1 05       	cpc	r29, r1
 206:	d0 f5       	brcc	.+116    	; 0x27c <__stack+0x1d>
    a = read_adc( ADC_DATA);
 208:	84 e0       	ldi	r24, 0x04	; 4
 20a:	d8 df       	rcall	.-80     	; 0x1bc <read_adc>
    sum_d += a;
 20c:	09 2e       	mov	r0, r25
 20e:	00 0c       	add	r0, r0
 210:	aa 0b       	sbc	r26, r26
 212:	bb 0b       	sbc	r27, r27
 214:	40 91 67 00 	lds	r20, 0x0067	; 0x800067 <sum_d>
 218:	50 91 68 00 	lds	r21, 0x0068	; 0x800068 <sum_d+0x1>
 21c:	60 91 69 00 	lds	r22, 0x0069	; 0x800069 <sum_d+0x2>
 220:	70 91 6a 00 	lds	r23, 0x006A	; 0x80006a <sum_d+0x3>
 224:	84 0f       	add	r24, r20
 226:	95 1f       	adc	r25, r21
 228:	a6 1f       	adc	r26, r22
 22a:	b7 1f       	adc	r27, r23
 22c:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <sum_d>
 230:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <sum_d+0x1>
 234:	a0 93 69 00 	sts	0x0069, r26	; 0x800069 <sum_d+0x2>
 238:	b0 93 6a 00 	sts	0x006A, r27	; 0x80006a <sum_d+0x3>
    a = read_adc( ADC_CLK);
 23c:	86 e0       	ldi	r24, 0x06	; 6
 23e:	be df       	rcall	.-132    	; 0x1bc <read_adc>
    sum_c += a;
 240:	09 2e       	mov	r0, r25
 242:	00 0c       	add	r0, r0
 244:	aa 0b       	sbc	r26, r26
 246:	bb 0b       	sbc	r27, r27
 248:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <sum_c>
 24c:	50 91 64 00 	lds	r21, 0x0064	; 0x800064 <sum_c+0x1>
 250:	60 91 65 00 	lds	r22, 0x0065	; 0x800065 <sum_c+0x2>
 254:	70 91 66 00 	lds	r23, 0x0066	; 0x800066 <sum_c+0x3>
 258:	84 0f       	add	r24, r20
 25a:	95 1f       	adc	r25, r21
 25c:	a6 1f       	adc	r26, r22
 25e:	b7 1f       	adc	r27, r23
 260:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <sum_c>
 264:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <sum_c+0x1>
 268:	a0 93 65 00 	sts	0x0065, r26	; 0x800065 <sum_c+0x2>
 26c:	b0 93 66 00 	sts	0x0066, r27	; 0x800066 <sum_c+0x3>
// return bit 0 = clk state  bit 1 = data state
uint8_t sample_clk_data() {
  uint8_t rv;

  sum_d = sum_c = 0;
  for( k=0; k<NAV; k++) {
 270:	21 96       	adiw	r28, 0x01	; 1
 272:	d0 93 62 00 	sts	0x0062, r29	; 0x800062 <k+0x1>
 276:	c0 93 61 00 	sts	0x0061, r28	; 0x800061 <k>
 27a:	bf cf       	rjmp	.-130    	; 0x1fa <sample_clk_data+0x2c>
    a = read_adc( ADC_CLK);
    sum_c += a;
  }

  rv = 0;
  if( (base_d - (sum_d / NAV)) >= THR)
 27c:	60 91 67 00 	lds	r22, 0x0067	; 0x800067 <sum_d>
 280:	70 91 68 00 	lds	r23, 0x0068	; 0x800068 <sum_d+0x1>
 284:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <sum_d+0x2>
 288:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <sum_d+0x3>
 28c:	22 ee       	ldi	r18, 0xE2	; 226
 28e:	3f ef       	ldi	r19, 0xFF	; 255
 290:	4f ef       	ldi	r20, 0xFF	; 255
 292:	5f ef       	ldi	r21, 0xFF	; 255
 294:	b1 d2       	rcall	.+1378   	; 0x7f8 <__divmodsi4>
 296:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <base_d>
 29a:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <base_d+0x1>
 29e:	09 2e       	mov	r0, r25
 2a0:	00 0c       	add	r0, r0
 2a2:	aa 0b       	sbc	r26, r26
 2a4:	bb 0b       	sbc	r27, r27
 2a6:	82 0f       	add	r24, r18
 2a8:	93 1f       	adc	r25, r19
 2aa:	a4 1f       	adc	r26, r20
 2ac:	b5 1f       	adc	r27, r21
 2ae:	4e 97       	sbiw	r24, 0x1e	; 30
 2b0:	a1 05       	cpc	r26, r1
 2b2:	b1 05       	cpc	r27, r1
 2b4:	14 f0       	brlt	.+4      	; 0x2ba <__stack+0x5b>
    rv |= DATA_VAL;
 2b6:	c2 e0       	ldi	r28, 0x02	; 2
 2b8:	01 c0       	rjmp	.+2      	; 0x2bc <__stack+0x5d>
    sum_d += a;
    a = read_adc( ADC_CLK);
    sum_c += a;
  }

  rv = 0;
 2ba:	c0 e0       	ldi	r28, 0x00	; 0
  if( (base_d - (sum_d / NAV)) >= THR)
    rv |= DATA_VAL;
  if( (base_c - (sum_c / NAV)) >= THR)
 2bc:	60 91 63 00 	lds	r22, 0x0063	; 0x800063 <sum_c>
 2c0:	70 91 64 00 	lds	r23, 0x0064	; 0x800064 <sum_c+0x1>
 2c4:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <sum_c+0x2>
 2c8:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <sum_c+0x3>
 2cc:	22 ee       	ldi	r18, 0xE2	; 226
 2ce:	3f ef       	ldi	r19, 0xFF	; 255
 2d0:	4f ef       	ldi	r20, 0xFF	; 255
 2d2:	5f ef       	ldi	r21, 0xFF	; 255
 2d4:	91 d2       	rcall	.+1314   	; 0x7f8 <__divmodsi4>
 2d6:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <base_c>
 2da:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <base_c+0x1>
 2de:	09 2e       	mov	r0, r25
 2e0:	00 0c       	add	r0, r0
 2e2:	aa 0b       	sbc	r26, r26
 2e4:	bb 0b       	sbc	r27, r27
 2e6:	82 0f       	add	r24, r18
 2e8:	93 1f       	adc	r25, r19
 2ea:	a4 1f       	adc	r26, r20
 2ec:	b5 1f       	adc	r27, r21
 2ee:	4e 97       	sbiw	r24, 0x1e	; 30
 2f0:	a1 05       	cpc	r26, r1
 2f2:	b1 05       	cpc	r27, r1
 2f4:	0c f0       	brlt	.+2      	; 0x2f8 <__stack+0x99>
    rv |= CLK_VAL;
 2f6:	c1 60       	ori	r28, 0x01	; 1

  return rv;
}
 2f8:	8c 2f       	mov	r24, r28
 2fa:	df 91       	pop	r29
 2fc:	cf 91       	pop	r28
 2fe:	08 95       	ret

00000300 <wait_for_clock>:
//
// wait for clock state change or button press
// return data state, set do_reset on button press
//
uint8_t wait_for_clock( uint8_t c)
{
 300:	cf 93       	push	r28
 302:	c8 2f       	mov	r28, r24
  uint8_t s;

  do {
    s = sample_clk_data();
 304:	64 df       	rcall	.-312    	; 0x1ce <sample_clk_data>
 306:	98 2f       	mov	r25, r24
    if( bit_is_clear( SW_PIN, SW_BIT)) {
 308:	29 b3       	in	r18, 0x19	; 25
 30a:	82 2f       	mov	r24, r18
 30c:	80 72       	andi	r24, 0x20	; 32
 30e:	25 fd       	sbrc	r18, 5
 310:	04 c0       	rjmp	.+8      	; 0x31a <wait_for_clock+0x1a>
      do_reset = 1;
 312:	91 e0       	ldi	r25, 0x01	; 1
 314:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
      return 0;
 318:	07 c0       	rjmp	.+14     	; 0x328 <wait_for_clock+0x28>
    }
  } while( (s & CLK_VAL) != c);
 31a:	89 2f       	mov	r24, r25
 31c:	81 70       	andi	r24, 0x01	; 1
 31e:	8c 13       	cpse	r24, r28
 320:	f1 cf       	rjmp	.-30     	; 0x304 <wait_for_clock+0x4>

  return( (s & DATA_VAL) != 0);
 322:	91 fb       	bst	r25, 1
 324:	88 27       	eor	r24, r24
 326:	80 f9       	bld	r24, 0
}
 328:	cf 91       	pop	r28
 32a:	08 95       	ret

0000032c <rx_byte>:

// receive blinky byte
uint8_t rx_byte() {
 32c:	1f 93       	push	r17
 32e:	cf 93       	push	r28
 330:	df 93       	push	r29
 332:	14 e0       	ldi	r17, 0x04	; 4

  uint8_t bit, byte, d;
  uint8_t i;

  bit = 0x80;
  byte = 0;
 334:	c0 e0       	ldi	r28, 0x00	; 0
uint8_t rx_byte() {

  uint8_t bit, byte, d;
  uint8_t i;

  bit = 0x80;
 336:	d0 e8       	ldi	r29, 0x80	; 128
  byte = 0;

  for( i=0; i<4; i++) {
    d = wait_for_clock( 1);
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	e2 df       	rcall	.-60     	; 0x300 <wait_for_clock>
    if( do_reset) return 0;
 33c:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 340:	99 23       	and	r25, r25
 342:	11 f0       	breq	.+4      	; 0x348 <rx_byte+0x1c>
 344:	80 e0       	ldi	r24, 0x00	; 0
 346:	11 c0       	rjmp	.+34     	; 0x36a <rx_byte+0x3e>
    if( d)
 348:	81 11       	cpse	r24, r1
      byte |= bit;
 34a:	cd 2b       	or	r28, r29
    bit >>= 1;
 34c:	d6 95       	lsr	r29
    d = wait_for_clock( 0);
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	d7 df       	rcall	.-82     	; 0x300 <wait_for_clock>
    if( do_reset) return 0;
 352:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 356:	91 11       	cpse	r25, r1
 358:	f5 cf       	rjmp	.-22     	; 0x344 <rx_byte+0x18>
    if( d)
 35a:	81 11       	cpse	r24, r1
      byte |= bit;
 35c:	cd 2b       	or	r28, r29
    bit >>= 1;
 35e:	d6 95       	lsr	r29
 360:	11 50       	subi	r17, 0x01	; 1
  uint8_t i;

  bit = 0x80;
  byte = 0;

  for( i=0; i<4; i++) {
 362:	51 f7       	brne	.-44     	; 0x338 <rx_byte+0xc>
      byte |= bit;
    bit >>= 1;
  }
  
  //  led_flip( 0x80);		/* toggle LED8 */
  led_set( byte);
 364:	8c 2f       	mov	r24, r28
 366:	24 df       	rcall	.-440    	; 0x1b0 <led_set>
  
  return byte;
 368:	8c 2f       	mov	r24, r28
}
 36a:	df 91       	pop	r29
 36c:	cf 91       	pop	r28
 36e:	1f 91       	pop	r17
 370:	08 95       	ret

00000372 <rx_ihex>:

// receive an intel hex record into buffer
// return type or -1 on failure
int rx_ihex() {
 372:	ef 92       	push	r14
 374:	ff 92       	push	r15
 376:	1f 93       	push	r17
 378:	cf 93       	push	r28
 37a:	df 93       	push	r29

  uint8_t* p = ihex;
  uint8_t i, n, c, s;

  n  = rx_byte();	/* get length */
 37c:	d7 df       	rcall	.-82     	; 0x32c <rx_byte>
  if( n == 0)		/* ignore length 0 records for now */
 37e:	88 23       	and	r24, r24
 380:	09 f4       	brne	.+2      	; 0x384 <rx_ihex+0x12>
 382:	59 c0       	rjmp	.+178    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
    return 0;

  ihex_nd = n;
 384:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <ihex_nd>
  *p++ = n;
 388:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <ihex>
 38c:	c4 ef       	ldi	r28, 0xF4	; 244
 38e:	d0 e0       	ldi	r29, 0x00	; 0

  for( i=0; i<3; i++) {
    *p++ = rx_byte();	/* get addr_hi, addr_lo, type */
 390:	21 96       	adiw	r28, 0x01	; 1
 392:	cc df       	rcall	.-104    	; 0x32c <rx_byte>
 394:	fe 01       	movw	r30, r28
 396:	31 97       	sbiw	r30, 0x01	; 1
 398:	80 83       	st	Z, r24
    if( do_reset) return -2;
 39a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 39e:	88 23       	and	r24, r24
 3a0:	19 f0       	breq	.+6      	; 0x3a8 <rx_ihex+0x36>
 3a2:	8e ef       	ldi	r24, 0xFE	; 254
 3a4:	9f ef       	ldi	r25, 0xFF	; 255
 3a6:	4c c0       	rjmp	.+152    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
    return 0;

  ihex_nd = n;
  *p++ = n;

  for( i=0; i<3; i++) {
 3a8:	80 e0       	ldi	r24, 0x00	; 0
 3aa:	c7 3f       	cpi	r28, 0xF7	; 247
 3ac:	d8 07       	cpc	r29, r24
 3ae:	81 f7       	brne	.-32     	; 0x390 <rx_ihex+0x1e>
    *p++ = rx_byte();	/* get addr_hi, addr_lo, type */
    if( do_reset) return -2;
  }
  ihex_nd = ihex[IHEX_LEN];
 3b0:	10 91 f3 00 	lds	r17, 0x00F3	; 0x8000f3 <ihex>
 3b4:	10 93 71 00 	sts	0x0071, r17	; 0x800071 <ihex_nd>

  ihex_addr = (ihex[IHEX_ADDR] << 8) | ihex[IHEX_ADDR+1];
 3b8:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <ihex+0x1>
 3bc:	90 91 f5 00 	lds	r25, 0x00F5	; 0x8000f5 <ihex+0x2>
 3c0:	98 27       	eor	r25, r24
 3c2:	89 27       	eor	r24, r25
 3c4:	98 27       	eor	r25, r24
 3c6:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <ihex_addr+0x1>
 3ca:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <ihex_addr>
  if( ihex_nd > 0 && ihex_nd <= 0x10) {
 3ce:	8f ef       	ldi	r24, 0xFF	; 255
 3d0:	81 0f       	add	r24, r17
 3d2:	80 31       	cpi	r24, 0x10	; 16
 3d4:	88 f4       	brcc	.+34     	; 0x3f8 <rx_ihex+0x86>
    for( i=0; i<ihex_nd; i++) {
 3d6:	87 ef       	ldi	r24, 0xF7	; 247
 3d8:	e8 2e       	mov	r14, r24
 3da:	80 e0       	ldi	r24, 0x00	; 0
 3dc:	f8 2e       	mov	r15, r24
      *p++ = rx_byte();		/* get data */
 3de:	21 96       	adiw	r28, 0x01	; 1
 3e0:	a5 df       	rcall	.-182    	; 0x32c <rx_byte>
 3e2:	fe 01       	movw	r30, r28
 3e4:	31 97       	sbiw	r30, 0x01	; 1
 3e6:	80 83       	st	Z, r24
      if( do_reset) return -2;
 3e8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 3ec:	81 11       	cpse	r24, r1
 3ee:	d9 cf       	rjmp	.-78     	; 0x3a2 <rx_ihex+0x30>
  }
  ihex_nd = ihex[IHEX_LEN];

  ihex_addr = (ihex[IHEX_ADDR] << 8) | ihex[IHEX_ADDR+1];
  if( ihex_nd > 0 && ihex_nd <= 0x10) {
    for( i=0; i<ihex_nd; i++) {
 3f0:	8c 2f       	mov	r24, r28
 3f2:	8e 19       	sub	r24, r14
 3f4:	81 17       	cp	r24, r17
 3f6:	98 f3       	brcs	.-26     	; 0x3de <rx_ihex+0x6c>
      *p++ = rx_byte();		/* get data */
      if( do_reset) return -2;
    }
  }
  c = rx_byte();		/* get checksum */
 3f8:	99 df       	rcall	.-206    	; 0x32c <rx_byte>
  *p++ = c;			/* store checksum at end */
 3fa:	88 83       	st	Y, r24
  if( do_reset) return -2;
 3fc:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 400:	91 11       	cpse	r25, r1
 402:	cf cf       	rjmp	.-98     	; 0x3a2 <rx_ihex+0x30>
 404:	60 e0       	ldi	r22, 0x00	; 0
  // calculate sum of received bytes
  s = 0;
  for( i=0; i<(ihex_nd+4); i++)
 406:	21 2f       	mov	r18, r17
 408:	30 e0       	ldi	r19, 0x00	; 0
 40a:	2d 5f       	subi	r18, 0xFD	; 253
 40c:	3f 4f       	sbci	r19, 0xFF	; 255
 40e:	46 2f       	mov	r20, r22
 410:	50 e0       	ldi	r21, 0x00	; 0
 412:	24 17       	cp	r18, r20
 414:	35 07       	cpc	r19, r21
 416:	3c f0       	brlt	.+14     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
    s += ihex[i];
 418:	fa 01       	movw	r30, r20
 41a:	ed 50       	subi	r30, 0x0D	; 13
 41c:	ff 4f       	sbci	r31, 0xFF	; 255
 41e:	40 81       	ld	r20, Z
 420:	94 0f       	add	r25, r20
  c = rx_byte();		/* get checksum */
  *p++ = c;			/* store checksum at end */
  if( do_reset) return -2;
  // calculate sum of received bytes
  s = 0;
  for( i=0; i<(ihex_nd+4); i++)
 422:	6f 5f       	subi	r22, 0xFF	; 255
 424:	f4 cf       	rjmp	.-24     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
    s += ihex[i];

  s = (s ^ 0xff)+1;
 426:	91 95       	neg	r25
  *p++ = s;			/* store raw sum */
 428:	99 83       	std	Y+1, r25	; 0x01

  if( c == s ) {
 42a:	89 13       	cpse	r24, r25
 42c:	07 c0       	rjmp	.+14     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
    return ihex[IHEX_TYPE];
 42e:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <ihex+0x3>
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	05 c0       	rjmp	.+10     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
  uint8_t* p = ihex;
  uint8_t i, n, c, s;

  n  = rx_byte();	/* get length */
  if( n == 0)		/* ignore length 0 records for now */
    return 0;
 436:	80 e0       	ldi	r24, 0x00	; 0
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	02 c0       	rjmp	.+4      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
  *p++ = s;			/* store raw sum */

  if( c == s ) {
    return ihex[IHEX_TYPE];
  } else {
    return -1;
 43c:	8f ef       	ldi	r24, 0xFF	; 255
 43e:	9f ef       	ldi	r25, 0xFF	; 255
  }
}
 440:	df 91       	pop	r29
 442:	cf 91       	pop	r28
 444:	1f 91       	pop	r17
 446:	ff 90       	pop	r15
 448:	ef 90       	pop	r14
 44a:	08 95       	ret

0000044c <delay_column>:

// delay one column with code 0..15
// about 0.5 ms per unit
void delay_column( uint8_t d)
{
  if( d < 15)
 44c:	8f 30       	cpi	r24, 0x0F	; 15
 44e:	48 f4       	brcc	.+18     	; 0x462 <delay_column+0x16>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	96 95       	lsr	r25
 454:	98 2f       	mov	r25, r24
 456:	88 27       	eor	r24, r24
 458:	97 95       	ror	r25
 45a:	87 95       	ror	r24
 45c:	01 97       	sbiw	r24, 0x01	; 1
 45e:	f1 f7       	brne	.-4      	; 0x45c <delay_column+0x10>
 460:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 462:	2f e9       	ldi	r18, 0x9F	; 159
 464:	86 e8       	ldi	r24, 0x86	; 134
 466:	91 e0       	ldi	r25, 0x01	; 1
 468:	21 50       	subi	r18, 0x01	; 1
 46a:	80 40       	sbci	r24, 0x00	; 0
 46c:	90 40       	sbci	r25, 0x00	; 0
 46e:	e1 f7       	brne	.-8      	; 0x468 <delay_column+0x1c>
 470:	00 c0       	rjmp	.+0      	; 0x472 <delay_column+0x26>
 472:	00 00       	nop
 474:	08 95       	ret

00000476 <show_messages>:
// display messages if any in EEPROM
// returns:
// 0 - no messages to display
// 1 - button pressed
//
int show_messages() {
 476:	bf 92       	push	r11
 478:	cf 92       	push	r12
 47a:	df 92       	push	r13
 47c:	ef 92       	push	r14
 47e:	ff 92       	push	r15
 480:	0f 93       	push	r16
 482:	1f 93       	push	r17
 484:	cf 93       	push	r28
 486:	df 93       	push	r29
  uint8_t i, t, n, j, speed, c;

  eep_nd = eeprom_read_byte( 0); /* get EEPROM data size */
 488:	80 e0       	ldi	r24, 0x00	; 0
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	13 d2       	rcall	.+1062   	; 0x8b4 <eeprom_read_byte>
 48e:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <eep_nd>

  // display EEPROM buffer size on low LEDs, high one on
  led_set( (eep_nd&0x7f) | 0x80);
 492:	80 68       	ori	r24, 0x80	; 128
 494:	8d de       	rcall	.-742    	; 0x1b0 <led_set>
 496:	2f e9       	ldi	r18, 0x9F	; 159
 498:	86 e8       	ldi	r24, 0x86	; 134
 49a:	91 e0       	ldi	r25, 0x01	; 1
 49c:	21 50       	subi	r18, 0x01	; 1
 49e:	80 40       	sbci	r24, 0x00	; 0
 4a0:	90 40       	sbci	r25, 0x00	; 0
 4a2:	e1 f7       	brne	.-8      	; 0x49c <show_messages+0x26>
 4a4:	00 c0       	rjmp	.+0      	; 0x4a6 <show_messages+0x30>
 4a6:	00 00       	nop
  _delay_ms( 500);
  // turn off all LEDs
  led_off( 0xff);
 4a8:	78 de       	rcall	.-784    	; 0x19a <led_off.constprop.1>
 4aa:	ef e9       	ldi	r30, 0x9F	; 159
 4ac:	f6 e8       	ldi	r31, 0x86	; 134
 4ae:	21 e0       	ldi	r18, 0x01	; 1
 4b0:	e1 50       	subi	r30, 0x01	; 1
 4b2:	f0 40       	sbci	r31, 0x00	; 0
 4b4:	20 40       	sbci	r18, 0x00	; 0
 4b6:	e1 f7       	brne	.-8      	; 0x4b0 <show_messages+0x3a>
 4b8:	00 c0       	rjmp	.+0      	; 0x4ba <show_messages+0x44>
 4ba:	00 00       	nop
  _delay_ms( 500);

  if( eep_nd < 4 || eep_nd > EEBUFSIZ)
 4bc:	40 91 72 00 	lds	r20, 0x0072	; 0x800072 <eep_nd>
 4c0:	8c ef       	ldi	r24, 0xFC	; 252
 4c2:	84 0f       	add	r24, r20
 4c4:	8d 37       	cpi	r24, 0x7D	; 125
 4c6:	08 f0       	brcs	.+2      	; 0x4ca <show_messages+0x54>
 4c8:	46 c0       	rjmp	.+140    	; 0x556 <show_messages+0xe0>
    return 0;

  // goto blinky mode until button pressed
  // copy data from the EEPROM
  eeprom_read_block( eebuf, (void *)1, eep_nd);
 4ca:	50 e0       	ldi	r21, 0x00	; 0
 4cc:	61 e0       	ldi	r22, 0x01	; 1
 4ce:	70 e0       	ldi	r23, 0x00	; 0
 4d0:	83 e7       	ldi	r24, 0x73	; 115
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	df d1       	rcall	.+958    	; 0x894 <eeprom_read_block>
  }
  uart_putc( '*');
  crlf();
#endif

  n = eebuf[2];		/* length of first message */
 4d6:	b0 90 75 00 	lds	r11, 0x0075	; 0x800075 <eebuf+0x2>
  speed = (eebuf[1] >> 2) & 15; /* speed code 0-15, 7=default */
 4da:	c0 91 74 00 	lds	r28, 0x0074	; 0x800074 <eebuf+0x1>
 4de:	c6 95       	lsr	r28
 4e0:	c6 95       	lsr	r28
 4e2:	cf 70       	andi	r28, 0x0F	; 15

  // loop until button is pressed
  while( bit_is_set( SW_PIN, SW_BIT) ) {
 4e4:	cd 9b       	sbis	0x19, 5	; 25
 4e6:	34 c0       	rjmp	.+104    	; 0x550 <show_messages+0xda>
 4e8:	da e0       	ldi	r29, 0x0A	; 10

    // space between messages
    for( j=0; j<10; j++)
      delay_column( speed);
 4ea:	8c 2f       	mov	r24, r28
 4ec:	af df       	rcall	.-162    	; 0x44c <delay_column>
 4ee:	d1 50       	subi	r29, 0x01	; 1

  // loop until button is pressed
  while( bit_is_set( SW_PIN, SW_BIT) ) {

    // space between messages
    for( j=0; j<10; j++)
 4f0:	e1 f7       	brne	.-8      	; 0x4ea <show_messages+0x74>
 4f2:	86 e7       	ldi	r24, 0x76	; 118
 4f4:	e8 2e       	mov	r14, r24
 4f6:	80 e0       	ldi	r24, 0x00	; 0
 4f8:	f8 2e       	mov	r15, r24
      delay_column( speed);

    // loop over message
    for( i=0; i<n; i++) {
 4fa:	db 15       	cp	r29, r11
 4fc:	99 f3       	breq	.-26     	; 0x4e4 <show_messages+0x6e>
      uart_putc( 'd');
      uart_hex2( i);
      uart_putc( '=');
#endif
      // look up character
      t = eebuf[3+i] * FONT_WIDTH;
 4fe:	f7 01       	movw	r30, r14
 500:	81 91       	ld	r24, Z+
 502:	7f 01       	movw	r14, r30
 504:	65 e0       	ldi	r22, 0x05	; 5
 506:	6f d1       	rcall	.+734    	; 0x7e6 <__mulqi3>
      if( t < sizeof(font_table)) {
 508:	8d 3c       	cpi	r24, 0xCD	; 205
 50a:	a8 f4       	brcc	.+42     	; 0x536 <show_messages+0xc0>
 50c:	c1 2c       	mov	r12, r1
 50e:	d1 2c       	mov	r13, r1
	for( j=0; j<FONT_WIDTH; j++) {
	  c = pgm_read_byte(&(font_table[t+j]));
 510:	08 2f       	mov	r16, r24
 512:	10 e0       	ldi	r17, 0x00	; 0
 514:	f8 01       	movw	r30, r16
 516:	ec 0d       	add	r30, r12
 518:	fd 1d       	adc	r31, r13
 51a:	ee 5c       	subi	r30, 0xCE	; 206
 51c:	ff 4f       	sbci	r31, 0xFF	; 255
 51e:	84 91       	lpm	r24, Z
	  led_set( c);
 520:	47 de       	rcall	.-882    	; 0x1b0 <led_set>
#ifdef USE_UART
	  uart_hex2( c);
	  uart_putc( ' ');
#endif
	  delay_column( speed);
 522:	8c 2f       	mov	r24, r28
 524:	93 df       	rcall	.-218    	; 0x44c <delay_column>
 526:	ff ef       	ldi	r31, 0xFF	; 255
 528:	cf 1a       	sub	r12, r31
 52a:	df 0a       	sbc	r13, r31
      uart_putc( '=');
#endif
      // look up character
      t = eebuf[3+i] * FONT_WIDTH;
      if( t < sizeof(font_table)) {
	for( j=0; j<FONT_WIDTH; j++) {
 52c:	25 e0       	ldi	r18, 0x05	; 5
 52e:	c2 16       	cp	r12, r18
 530:	d1 04       	cpc	r13, r1
 532:	81 f7       	brne	.-32     	; 0x514 <show_messages+0x9e>
 534:	06 c0       	rjmp	.+12     	; 0x542 <show_messages+0xcc>
      } else {		// invalid code probably a space
	// delay for three extra columns for space
#ifdef USE_UART
	uart_putc('S');
#endif
	delay_column( speed);
 536:	8c 2f       	mov	r24, r28
 538:	89 df       	rcall	.-238    	; 0x44c <delay_column>
	delay_column( speed);
 53a:	8c 2f       	mov	r24, r28
 53c:	87 df       	rcall	.-242    	; 0x44c <delay_column>
	delay_column( speed);
 53e:	8c 2f       	mov	r24, r28
 540:	85 df       	rcall	.-246    	; 0x44c <delay_column>
      }
      led_off( 0xff);
 542:	2b de       	rcall	.-938    	; 0x19a <led_off.constprop.1>
      delay_column( speed); /* two blank columns between characters */
 544:	8c 2f       	mov	r24, r28
 546:	82 df       	rcall	.-252    	; 0x44c <delay_column>
      delay_column( speed);
 548:	8c 2f       	mov	r24, r28
 54a:	80 df       	rcall	.-256    	; 0x44c <delay_column>
    // space between messages
    for( j=0; j<10; j++)
      delay_column( speed);

    // loop over message
    for( i=0; i<n; i++) {
 54c:	df 5f       	subi	r29, 0xFF	; 255
 54e:	d5 cf       	rjmp	.-86     	; 0x4fa <show_messages+0x84>
#endif
    }
  }

  // fall out if button pressed
  return 1;
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	02 c0       	rjmp	.+4      	; 0x55a <show_messages+0xe4>
  // turn off all LEDs
  led_off( 0xff);
  _delay_ms( 500);

  if( eep_nd < 4 || eep_nd > EEBUFSIZ)
    return 0;
 556:	80 e0       	ldi	r24, 0x00	; 0
 558:	90 e0       	ldi	r25, 0x00	; 0
    }
  }

  // fall out if button pressed
  return 1;
}
 55a:	df 91       	pop	r29
 55c:	cf 91       	pop	r28
 55e:	1f 91       	pop	r17
 560:	0f 91       	pop	r16
 562:	ff 90       	pop	r15
 564:	ef 90       	pop	r14
 566:	df 90       	pop	r13
 568:	cf 90       	pop	r12
 56a:	bf 90       	pop	r11
 56c:	08 95       	ret

0000056e <main>:


int main(void)
{
 56e:	20 e0       	ldi	r18, 0x00	; 0
 570:	30 e0       	ldi	r19, 0x00	; 0
  uint8_t i;
  for( i=0; i<8; i++) {
    if( led_port(i) == LED_PORTA)
      DDRA |= _BV(led_bit(i));
    else
      DDRB |= _BV(led_bit(i));
 572:	41 e0       	ldi	r20, 0x01	; 1
 574:	50 e0       	ldi	r21, 0x00	; 0

static void inline setup_led_ports()
{
  uint8_t i;
  for( i=0; i<8; i++) {
    if( led_port(i) == LED_PORTA)
 576:	c9 01       	movw	r24, r18
 578:	88 0f       	add	r24, r24
 57a:	99 1f       	adc	r25, r25
 57c:	fc 01       	movw	r30, r24
 57e:	ee 5d       	subi	r30, 0xDE	; 222
 580:	ff 4f       	sbci	r31, 0xFF	; 255
 582:	64 91       	lpm	r22, Z
 584:	fc 01       	movw	r30, r24
 586:	31 96       	adiw	r30, 0x01	; 1
      DDRA |= _BV(led_bit(i));
 588:	ee 5d       	subi	r30, 0xDE	; 222
 58a:	ff 4f       	sbci	r31, 0xFF	; 255

static void inline setup_led_ports()
{
  uint8_t i;
  for( i=0; i<8; i++) {
    if( led_port(i) == LED_PORTA)
 58c:	61 11       	cpse	r22, r1
 58e:	0a c0       	rjmp	.+20     	; 0x5a4 <main+0x36>
      DDRA |= _BV(led_bit(i));
 590:	e4 91       	lpm	r30, Z
 592:	6a b3       	in	r22, 0x1a	; 26
 594:	ca 01       	movw	r24, r20
 596:	01 c0       	rjmp	.+2      	; 0x59a <main+0x2c>
 598:	88 0f       	add	r24, r24
 59a:	ea 95       	dec	r30
 59c:	ea f7       	brpl	.-6      	; 0x598 <main+0x2a>
 59e:	86 2b       	or	r24, r22
 5a0:	8a bb       	out	0x1a, r24	; 26
 5a2:	09 c0       	rjmp	.+18     	; 0x5b6 <main+0x48>
    else
      DDRB |= _BV(led_bit(i));
 5a4:	e4 91       	lpm	r30, Z
 5a6:	67 b3       	in	r22, 0x17	; 23
 5a8:	ca 01       	movw	r24, r20
 5aa:	01 c0       	rjmp	.+2      	; 0x5ae <main+0x40>
 5ac:	88 0f       	add	r24, r24
 5ae:	ea 95       	dec	r30
 5b0:	ea f7       	brpl	.-6      	; 0x5ac <main+0x3e>
 5b2:	86 2b       	or	r24, r22
 5b4:	87 bb       	out	0x17, r24	; 23
 5b6:	2f 5f       	subi	r18, 0xFF	; 255
 5b8:	3f 4f       	sbci	r19, 0xFF	; 255
#define led_port(n) (pgm_read_byte(&(led_port_code[((n)<<1)])))

static void inline setup_led_ports()
{
  uint8_t i;
  for( i=0; i<8; i++) {
 5ba:	28 30       	cpi	r18, 0x08	; 8
 5bc:	31 05       	cpc	r19, r1
 5be:	d9 f6       	brne	.-74     	; 0x576 <main+0x8>
{
  setup_led_ports();
#ifdef USE_UART
  UART_DDR |= UART_TX_BIT;
#endif
  SW_PORT |= SW_MASK;		/* pull-up on switch */
 5c0:	dd 9a       	sbi	0x1b, 5	; 27
  ADCSRA |= _BV(ADEN);		/* enable ADC, default settings */
 5c2:	37 9a       	sbi	0x06, 7	; 6
  //  ADCSRB |= _BV(ADLAR);		/* left adjust result */
  ADMUX = 7;
 5c4:	87 e0       	ldi	r24, 0x07	; 7
 5c6:	87 b9       	out	0x07, r24	; 7
  uint8_t t;
  uint8_t nblk;

  ioinit();
  // test LEDs
  led_off( 0xff);
 5c8:	e8 dd       	rcall	.-1072   	; 0x19a <led_off.constprop.1>
 5ca:	87 ea       	ldi	r24, 0xA7	; 167
 5cc:	91 e6       	ldi	r25, 0x61	; 97
 5ce:	01 97       	sbiw	r24, 0x01	; 1
 5d0:	f1 f7       	brne	.-4      	; 0x5ce <main+0x60>
 5d2:	00 c0       	rjmp	.+0      	; 0x5d4 <main+0x66>
 5d4:	00 00       	nop
  _delay_ms( 100);
  led_on( 0xff);
 5d6:	8f ef       	ldi	r24, 0xFF	; 255
 5d8:	d8 dd       	rcall	.-1104   	; 0x18a <led_on>
 5da:	87 ea       	ldi	r24, 0xA7	; 167
 5dc:	91 e6       	ldi	r25, 0x61	; 97
 5de:	01 97       	sbiw	r24, 0x01	; 1
 5e0:	f1 f7       	brne	.-4      	; 0x5de <main+0x70>
 5e2:	00 c0       	rjmp	.+0      	; 0x5e4 <main+0x76>
 5e4:	00 00       	nop
  _delay_ms( 100);
  led_off( 0xff);  
 5e6:	d9 dd       	rcall	.-1102   	; 0x19a <led_off.constprop.1>
 5e8:	e1 2c       	mov	r14, r1
 5ea:	f1 2c       	mov	r15, r1
  for( i=0; i<8; i++) {
    _delay_ms(100);
    led_on( 1<<i);
 5ec:	c1 e0       	ldi	r28, 0x01	; 1
 5ee:	87 ea       	ldi	r24, 0xA7	; 167
 5f0:	91 e6       	ldi	r25, 0x61	; 97
 5f2:	01 97       	sbiw	r24, 0x01	; 1
 5f4:	f1 f7       	brne	.-4      	; 0x5f2 <main+0x84>
 5f6:	00 c0       	rjmp	.+0      	; 0x5f8 <main+0x8a>
 5f8:	00 00       	nop
 5fa:	8c 2f       	mov	r24, r28
 5fc:	0e 2c       	mov	r0, r14
 5fe:	01 c0       	rjmp	.+2      	; 0x602 <main+0x94>
 600:	88 0f       	add	r24, r24
 602:	0a 94       	dec	r0
 604:	ea f7       	brpl	.-6      	; 0x600 <main+0x92>
 606:	c1 dd       	rcall	.-1150   	; 0x18a <led_on>
 608:	9f ef       	ldi	r25, 0xFF	; 255
 60a:	e9 1a       	sub	r14, r25
 60c:	f9 0a       	sbc	r15, r25
  led_off( 0xff);
  _delay_ms( 100);
  led_on( 0xff);
  _delay_ms( 100);
  led_off( 0xff);  
  for( i=0; i<8; i++) {
 60e:	28 e0       	ldi	r18, 0x08	; 8
 610:	e2 16       	cp	r14, r18
 612:	f1 04       	cpc	r15, r1
 614:	61 f7       	brne	.-40     	; 0x5ee <main+0x80>
 616:	87 ea       	ldi	r24, 0xA7	; 167
 618:	91 e6       	ldi	r25, 0x61	; 97
 61a:	01 97       	sbiw	r24, 0x01	; 1
 61c:	f1 f7       	brne	.-4      	; 0x61a <main+0xac>
 61e:	00 c0       	rjmp	.+0      	; 0x620 <main+0xb2>
 620:	00 00       	nop
    _delay_ms(100);
    led_on( 1<<i);
  }
  _delay_ms(100);
  led_off( 0xff);
 622:	bb dd       	rcall	.-1162   	; 0x19a <led_off.constprop.1>


  // Power-up:   check for EEPROM message and display it indefinitely until
  // the button is pressed
  i = show_messages();
 624:	28 df       	rcall	.-432    	; 0x476 <show_messages>

  do_reset = 1;
 626:	81 e0       	ldi	r24, 0x01	; 1
 628:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	sum_d += a;
	a = read_adc( ADC_CLK);
	sum_c += a;
	_delay_ms(1);
      }
      base_d = sum_d / NAV;
 62c:	8e e1       	ldi	r24, 0x1E	; 30
 62e:	c8 2e       	mov	r12, r24
 630:	d1 2c       	mov	r13, r1
 632:	e1 2c       	mov	r14, r1
 634:	f1 2c       	mov	r15, r1

  while( 1) {

    // see if button is pressed
    // if so, recalibrate threshold, reset bit counter
    if( bit_is_clear( SW_PIN, SW_BIT) || do_reset) {
 636:	cd 9b       	sbis	0x19, 5	; 25
 638:	05 c0       	rjmp	.+10     	; 0x644 <main+0xd6>
 63a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 63e:	88 23       	and	r24, r24
 640:	09 f4       	brne	.+2      	; 0x644 <main+0xd6>
 642:	96 c0       	rjmp	.+300    	; 0x770 <main+0x202>

#ifdef USE_UART
      uart_putc( 'R');
      crlf();
#endif
      led_set( 0x80);
 644:	80 e8       	ldi	r24, 0x80	; 128
 646:	b4 dd       	rcall	.-1176   	; 0x1b0 <led_set>

      // measure background level
      sum_d = sum_c = 0;
 648:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <sum_c>
 64c:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <sum_c+0x1>
 650:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <sum_c+0x2>
 654:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <sum_c+0x3>
 658:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <sum_d>
 65c:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <sum_d+0x1>
 660:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <sum_d+0x2>
 664:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <sum_d+0x3>
      for( k=0; k<NAV; k++) {
 668:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <k+0x1>
 66c:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <k>
 670:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <k>
 674:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <k+0x1>
 678:	4e 97       	sbiw	r24, 0x1e	; 30
 67a:	08 f0       	brcs	.+2      	; 0x67e <main+0x110>
 67c:	44 c0       	rjmp	.+136    	; 0x706 <main+0x198>
	a = read_adc( ADC_DATA);
 67e:	84 e0       	ldi	r24, 0x04	; 4
 680:	9d dd       	rcall	.-1222   	; 0x1bc <read_adc>
	sum_d += a;
 682:	09 2e       	mov	r0, r25
 684:	00 0c       	add	r0, r0
 686:	aa 0b       	sbc	r26, r26
 688:	bb 0b       	sbc	r27, r27
 68a:	40 91 67 00 	lds	r20, 0x0067	; 0x800067 <sum_d>
 68e:	50 91 68 00 	lds	r21, 0x0068	; 0x800068 <sum_d+0x1>
 692:	60 91 69 00 	lds	r22, 0x0069	; 0x800069 <sum_d+0x2>
 696:	70 91 6a 00 	lds	r23, 0x006A	; 0x80006a <sum_d+0x3>
 69a:	84 0f       	add	r24, r20
 69c:	95 1f       	adc	r25, r21
 69e:	a6 1f       	adc	r26, r22
 6a0:	b7 1f       	adc	r27, r23
 6a2:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <sum_d>
 6a6:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <sum_d+0x1>
 6aa:	a0 93 69 00 	sts	0x0069, r26	; 0x800069 <sum_d+0x2>
 6ae:	b0 93 6a 00 	sts	0x006A, r27	; 0x80006a <sum_d+0x3>
	a = read_adc( ADC_CLK);
 6b2:	86 e0       	ldi	r24, 0x06	; 6
 6b4:	83 dd       	rcall	.-1274   	; 0x1bc <read_adc>
	sum_c += a;
 6b6:	09 2e       	mov	r0, r25
 6b8:	00 0c       	add	r0, r0
 6ba:	aa 0b       	sbc	r26, r26
 6bc:	bb 0b       	sbc	r27, r27
 6be:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <sum_c>
 6c2:	50 91 64 00 	lds	r21, 0x0064	; 0x800064 <sum_c+0x1>
 6c6:	60 91 65 00 	lds	r22, 0x0065	; 0x800065 <sum_c+0x2>
 6ca:	70 91 66 00 	lds	r23, 0x0066	; 0x800066 <sum_c+0x3>
 6ce:	84 0f       	add	r24, r20
 6d0:	95 1f       	adc	r25, r21
 6d2:	a6 1f       	adc	r26, r22
 6d4:	b7 1f       	adc	r27, r23
 6d6:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <sum_c>
 6da:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <sum_c+0x1>
 6de:	a0 93 65 00 	sts	0x0065, r26	; 0x800065 <sum_c+0x2>
 6e2:	b0 93 66 00 	sts	0x0066, r27	; 0x800066 <sum_c+0x3>
 6e6:	89 ef       	ldi	r24, 0xF9	; 249
 6e8:	90 e0       	ldi	r25, 0x00	; 0
 6ea:	01 97       	sbiw	r24, 0x01	; 1
 6ec:	f1 f7       	brne	.-4      	; 0x6ea <main+0x17c>
 6ee:	00 c0       	rjmp	.+0      	; 0x6f0 <main+0x182>
 6f0:	00 00       	nop
#endif
      led_set( 0x80);

      // measure background level
      sum_d = sum_c = 0;
      for( k=0; k<NAV; k++) {
 6f2:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <k>
 6f6:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <k+0x1>
 6fa:	01 96       	adiw	r24, 0x01	; 1
 6fc:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <k+0x1>
 700:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <k>
 704:	b5 cf       	rjmp	.-150    	; 0x670 <main+0x102>
	sum_d += a;
	a = read_adc( ADC_CLK);
	sum_c += a;
	_delay_ms(1);
      }
      base_d = sum_d / NAV;
 706:	60 91 67 00 	lds	r22, 0x0067	; 0x800067 <sum_d>
 70a:	70 91 68 00 	lds	r23, 0x0068	; 0x800068 <sum_d+0x1>
 70e:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <sum_d+0x2>
 712:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <sum_d+0x3>
 716:	a7 01       	movw	r20, r14
 718:	96 01       	movw	r18, r12
 71a:	6e d0       	rcall	.+220    	; 0x7f8 <__divmodsi4>
 71c:	30 93 6e 00 	sts	0x006E, r19	; 0x80006e <base_d+0x1>
 720:	20 93 6d 00 	sts	0x006D, r18	; 0x80006d <base_d>
      base_c = sum_c / NAV;
 724:	60 91 63 00 	lds	r22, 0x0063	; 0x800063 <sum_c>
 728:	70 91 64 00 	lds	r23, 0x0064	; 0x800064 <sum_c+0x1>
 72c:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <sum_c+0x2>
 730:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <sum_c+0x3>
 734:	a7 01       	movw	r20, r14
 736:	96 01       	movw	r18, r12
 738:	5f d0       	rcall	.+190    	; 0x7f8 <__divmodsi4>
 73a:	30 93 6c 00 	sts	0x006C, r19	; 0x80006c <base_c+0x1>
 73e:	20 93 6b 00 	sts	0x006B, r18	; 0x80006b <base_c>

      // now wait for button to be released, wait a while

      // loop while button is still pressed
      while( bit_is_clear( SW_PIN, SW_BIT))
 742:	cd 9b       	sbis	0x19, 5	; 25
 744:	fe cf       	rjmp	.-4      	; 0x742 <main+0x1d4>
 746:	9f e3       	ldi	r25, 0x3F	; 63
 748:	2d e0       	ldi	r18, 0x0D	; 13
 74a:	83 e0       	ldi	r24, 0x03	; 3
 74c:	91 50       	subi	r25, 0x01	; 1
 74e:	20 40       	sbci	r18, 0x00	; 0
 750:	80 40       	sbci	r24, 0x00	; 0
 752:	e1 f7       	brne	.-8      	; 0x74c <main+0x1de>
 754:	00 c0       	rjmp	.+0      	; 0x756 <main+0x1e8>
 756:	00 00       	nop
	;

      _delay_ms( 1000);
      // turn off all LEDs
      led_off( 0xff);
 758:	20 dd       	rcall	.-1472   	; 0x19a <led_off.constprop.1>

      do_reset = 0;
 75a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
      ihex_nd = 0;
 75e:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <ihex_nd>
      memset( eebuf, 0xab, EEBUFSIZ);
 762:	40 e8       	ldi	r20, 0x80	; 128
 764:	50 e0       	ldi	r21, 0x00	; 0
 766:	6b ea       	ldi	r22, 0xAB	; 171
 768:	70 e0       	ldi	r23, 0x00	; 0
 76a:	83 e7       	ldi	r24, 0x73	; 115
 76c:	90 e0       	ldi	r25, 0x00	; 0
 76e:	8b d0       	rcall	.+278    	; 0x886 <memset>
    } // if( button pressed)...

    // look for intel hex records
    eep_nd = 0;
 770:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <eep_nd>

    while( !do_reset) {
 774:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 778:	81 11       	cpse	r24, r1
 77a:	33 c0       	rjmp	.+102    	; 0x7e2 <main+0x274>

      t = rx_ihex();
 77c:	fa dd       	rcall	.-1036   	; 0x372 <rx_ihex>
      ++nblk;
      
      if( do_reset)
 77e:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 782:	91 11       	cpse	r25, r1
 784:	2e c0       	rjmp	.+92     	; 0x7e2 <main+0x274>
	  led_set( 0);
	  _delay_ms(100);
	}
      }

      if( t == 0) {		/* end-of-file record */
 786:	81 11       	cpse	r24, r1
 788:	10 c0       	rjmp	.+32     	; 0x7aa <main+0x23c>
#ifdef USE_EEPROM
	if( eep_nd) {
 78a:	60 91 72 00 	lds	r22, 0x0072	; 0x800072 <eep_nd>
 78e:	66 23       	and	r22, r22
 790:	41 f1       	breq	.+80     	; 0x7e2 <main+0x274>
	  // copy EEPROM RAM buffer to EEPROM
	  eeprom_write_byte( (void *)0, eep_nd); /* first byte is size */
 792:	80 e0       	ldi	r24, 0x00	; 0
 794:	90 e0       	ldi	r25, 0x00	; 0
 796:	9f d0       	rcall	.+318    	; 0x8d6 <eeprom_write_byte>
	  eeprom_write_block( eebuf, (void *)1, eep_nd); /* then the data */
 798:	40 91 72 00 	lds	r20, 0x0072	; 0x800072 <eep_nd>
 79c:	50 e0       	ldi	r21, 0x00	; 0
 79e:	61 e0       	ldi	r22, 0x01	; 1
 7a0:	70 e0       	ldi	r23, 0x00	; 0
 7a2:	83 e7       	ldi	r24, 0x73	; 115
 7a4:	90 e0       	ldi	r25, 0x00	; 0
 7a6:	8e d0       	rcall	.+284    	; 0x8c4 <eeprom_write_block>
 7a8:	1c c0       	rjmp	.+56     	; 0x7e2 <main+0x274>
	}
#endif	
	break;
      }

      if( t == 6) {		/* EEPROM message */
 7aa:	86 30       	cpi	r24, 0x06	; 6
 7ac:	19 f7       	brne	.-58     	; 0x774 <main+0x206>
	i = ihex_addr + ihex[IHEX_LEN]; /* top address */
 7ae:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <ihex_addr>
 7b2:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <ihex_addr+0x1>
	// copy data to EEPROM buffer in RAM

	if( ihex_addr < 128 && i < EEBUFSIZ) {
 7b6:	80 38       	cpi	r24, 0x80	; 128
 7b8:	91 05       	cpc	r25, r1
 7ba:	e0 f6       	brcc	.-72     	; 0x774 <main+0x206>
#endif	
	break;
      }

      if( t == 6) {		/* EEPROM message */
	i = ihex_addr + ihex[IHEX_LEN]; /* top address */
 7bc:	40 91 f3 00 	lds	r20, 0x00F3	; 0x8000f3 <ihex>
 7c0:	c4 2f       	mov	r28, r20
 7c2:	c8 0f       	add	r28, r24
	// copy data to EEPROM buffer in RAM

	if( ihex_addr < 128 && i < EEBUFSIZ) {
 7c4:	c7 fd       	sbrc	r28, 7
 7c6:	d6 cf       	rjmp	.-84     	; 0x774 <main+0x206>
	  memcpy( &eebuf[ihex_addr], &ihex[IHEX_DATA], ihex[IHEX_LEN]);
 7c8:	50 e0       	ldi	r21, 0x00	; 0
 7ca:	67 ef       	ldi	r22, 0xF7	; 247
 7cc:	70 e0       	ldi	r23, 0x00	; 0
 7ce:	8d 58       	subi	r24, 0x8D	; 141
 7d0:	9f 4f       	sbci	r25, 0xFF	; 255
 7d2:	50 d0       	rcall	.+160    	; 0x874 <memcpy>
	  if( i > eep_nd)
 7d4:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <eep_nd>
 7d8:	8c 17       	cp	r24, r28
 7da:	60 f6       	brcc	.-104    	; 0x774 <main+0x206>
	    eep_nd = i;
 7dc:	c0 93 72 00 	sts	0x0072, r28	; 0x800072 <eep_nd>
 7e0:	c9 cf       	rjmp	.-110    	; 0x774 <main+0x206>
      }

    }

    // display messages if any, wait for button press
    show_messages();
 7e2:	49 de       	rcall	.-878    	; 0x476 <show_messages>

  }
 7e4:	28 cf       	rjmp	.-432    	; 0x636 <main+0xc8>

000007e6 <__mulqi3>:
 7e6:	00 24       	eor	r0, r0

000007e8 <__mulqi3_loop>:
 7e8:	80 fd       	sbrc	r24, 0
 7ea:	06 0e       	add	r0, r22
 7ec:	66 0f       	add	r22, r22
 7ee:	11 f0       	breq	.+4      	; 0x7f4 <__mulqi3_exit>
 7f0:	86 95       	lsr	r24
 7f2:	d1 f7       	brne	.-12     	; 0x7e8 <__mulqi3_loop>

000007f4 <__mulqi3_exit>:
 7f4:	80 2d       	mov	r24, r0
 7f6:	08 95       	ret

000007f8 <__divmodsi4>:
 7f8:	05 2e       	mov	r0, r21
 7fa:	97 fb       	bst	r25, 7
 7fc:	16 f4       	brtc	.+4      	; 0x802 <__divmodsi4+0xa>
 7fe:	00 94       	com	r0
 800:	0f d0       	rcall	.+30     	; 0x820 <__negsi2>
 802:	57 fd       	sbrc	r21, 7
 804:	05 d0       	rcall	.+10     	; 0x810 <__divmodsi4_neg2>
 806:	14 d0       	rcall	.+40     	; 0x830 <__udivmodsi4>
 808:	07 fc       	sbrc	r0, 7
 80a:	02 d0       	rcall	.+4      	; 0x810 <__divmodsi4_neg2>
 80c:	46 f4       	brtc	.+16     	; 0x81e <__divmodsi4_exit>
 80e:	08 c0       	rjmp	.+16     	; 0x820 <__negsi2>

00000810 <__divmodsi4_neg2>:
 810:	50 95       	com	r21
 812:	40 95       	com	r20
 814:	30 95       	com	r19
 816:	21 95       	neg	r18
 818:	3f 4f       	sbci	r19, 0xFF	; 255
 81a:	4f 4f       	sbci	r20, 0xFF	; 255
 81c:	5f 4f       	sbci	r21, 0xFF	; 255

0000081e <__divmodsi4_exit>:
 81e:	08 95       	ret

00000820 <__negsi2>:
 820:	90 95       	com	r25
 822:	80 95       	com	r24
 824:	70 95       	com	r23
 826:	61 95       	neg	r22
 828:	7f 4f       	sbci	r23, 0xFF	; 255
 82a:	8f 4f       	sbci	r24, 0xFF	; 255
 82c:	9f 4f       	sbci	r25, 0xFF	; 255
 82e:	08 95       	ret

00000830 <__udivmodsi4>:
 830:	a1 e2       	ldi	r26, 0x21	; 33
 832:	1a 2e       	mov	r1, r26
 834:	aa 1b       	sub	r26, r26
 836:	bb 1b       	sub	r27, r27
 838:	fd 01       	movw	r30, r26
 83a:	0d c0       	rjmp	.+26     	; 0x856 <__udivmodsi4_ep>

0000083c <__udivmodsi4_loop>:
 83c:	aa 1f       	adc	r26, r26
 83e:	bb 1f       	adc	r27, r27
 840:	ee 1f       	adc	r30, r30
 842:	ff 1f       	adc	r31, r31
 844:	a2 17       	cp	r26, r18
 846:	b3 07       	cpc	r27, r19
 848:	e4 07       	cpc	r30, r20
 84a:	f5 07       	cpc	r31, r21
 84c:	20 f0       	brcs	.+8      	; 0x856 <__udivmodsi4_ep>
 84e:	a2 1b       	sub	r26, r18
 850:	b3 0b       	sbc	r27, r19
 852:	e4 0b       	sbc	r30, r20
 854:	f5 0b       	sbc	r31, r21

00000856 <__udivmodsi4_ep>:
 856:	66 1f       	adc	r22, r22
 858:	77 1f       	adc	r23, r23
 85a:	88 1f       	adc	r24, r24
 85c:	99 1f       	adc	r25, r25
 85e:	1a 94       	dec	r1
 860:	69 f7       	brne	.-38     	; 0x83c <__udivmodsi4_loop>
 862:	60 95       	com	r22
 864:	70 95       	com	r23
 866:	80 95       	com	r24
 868:	90 95       	com	r25
 86a:	9b 01       	movw	r18, r22
 86c:	ac 01       	movw	r20, r24
 86e:	bd 01       	movw	r22, r26
 870:	cf 01       	movw	r24, r30
 872:	08 95       	ret

00000874 <memcpy>:
 874:	fb 01       	movw	r30, r22
 876:	dc 01       	movw	r26, r24
 878:	02 c0       	rjmp	.+4      	; 0x87e <memcpy+0xa>
 87a:	01 90       	ld	r0, Z+
 87c:	0d 92       	st	X+, r0
 87e:	41 50       	subi	r20, 0x01	; 1
 880:	50 40       	sbci	r21, 0x00	; 0
 882:	d8 f7       	brcc	.-10     	; 0x87a <memcpy+0x6>
 884:	08 95       	ret

00000886 <memset>:
 886:	dc 01       	movw	r26, r24
 888:	01 c0       	rjmp	.+2      	; 0x88c <memset+0x6>
 88a:	6d 93       	st	X+, r22
 88c:	41 50       	subi	r20, 0x01	; 1
 88e:	50 40       	sbci	r21, 0x00	; 0
 890:	e0 f7       	brcc	.-8      	; 0x88a <memset+0x4>
 892:	08 95       	ret

00000894 <eeprom_read_block>:
 894:	dc 01       	movw	r26, r24
 896:	cb 01       	movw	r24, r22

00000898 <eeprom_read_blraw>:
 898:	fc 01       	movw	r30, r24
 89a:	e1 99       	sbic	0x1c, 1	; 28
 89c:	fe cf       	rjmp	.-4      	; 0x89a <eeprom_read_blraw+0x2>
 89e:	06 c0       	rjmp	.+12     	; 0x8ac <eeprom_read_blraw+0x14>
 8a0:	ff bb       	out	0x1f, r31	; 31
 8a2:	ee bb       	out	0x1e, r30	; 30
 8a4:	e0 9a       	sbi	0x1c, 0	; 28
 8a6:	31 96       	adiw	r30, 0x01	; 1
 8a8:	0d b2       	in	r0, 0x1d	; 29
 8aa:	0d 92       	st	X+, r0
 8ac:	41 50       	subi	r20, 0x01	; 1
 8ae:	50 40       	sbci	r21, 0x00	; 0
 8b0:	b8 f7       	brcc	.-18     	; 0x8a0 <eeprom_read_blraw+0x8>
 8b2:	08 95       	ret

000008b4 <eeprom_read_byte>:
 8b4:	e1 99       	sbic	0x1c, 1	; 28
 8b6:	fe cf       	rjmp	.-4      	; 0x8b4 <eeprom_read_byte>
 8b8:	9f bb       	out	0x1f, r25	; 31
 8ba:	8e bb       	out	0x1e, r24	; 30
 8bc:	e0 9a       	sbi	0x1c, 0	; 28
 8be:	99 27       	eor	r25, r25
 8c0:	8d b3       	in	r24, 0x1d	; 29
 8c2:	08 95       	ret

000008c4 <eeprom_write_block>:
 8c4:	dc 01       	movw	r26, r24
 8c6:	cb 01       	movw	r24, r22
 8c8:	02 c0       	rjmp	.+4      	; 0x8ce <eeprom_write_block+0xa>
 8ca:	2d 91       	ld	r18, X+
 8cc:	05 d0       	rcall	.+10     	; 0x8d8 <eeprom_write_r18>
 8ce:	41 50       	subi	r20, 0x01	; 1
 8d0:	50 40       	sbci	r21, 0x00	; 0
 8d2:	d8 f7       	brcc	.-10     	; 0x8ca <eeprom_write_block+0x6>
 8d4:	08 95       	ret

000008d6 <eeprom_write_byte>:
 8d6:	26 2f       	mov	r18, r22

000008d8 <eeprom_write_r18>:
 8d8:	e1 99       	sbic	0x1c, 1	; 28
 8da:	fe cf       	rjmp	.-4      	; 0x8d8 <eeprom_write_r18>
 8dc:	1c ba       	out	0x1c, r1	; 28
 8de:	9f bb       	out	0x1f, r25	; 31
 8e0:	8e bb       	out	0x1e, r24	; 30
 8e2:	2d bb       	out	0x1d, r18	; 29
 8e4:	0f b6       	in	r0, 0x3f	; 63
 8e6:	f8 94       	cli
 8e8:	e2 9a       	sbi	0x1c, 2	; 28
 8ea:	e1 9a       	sbi	0x1c, 1	; 28
 8ec:	0f be       	out	0x3f, r0	; 63
 8ee:	01 96       	adiw	r24, 0x01	; 1
 8f0:	08 95       	ret

000008f2 <_exit>:
 8f2:	f8 94       	cli

000008f4 <__stop_program>:
 8f4:	ff cf       	rjmp	.-2      	; 0x8f4 <__stop_program>
